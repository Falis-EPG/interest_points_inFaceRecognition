# -*- coding: utf-8 -*-
"""faceRecognition.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yz9T7CimWFvgMYIs3IDL2EmzwOSvOKqC
"""

!sudo apt-get install opencv

!pip install opencv-python

import cv2
import dlib
import numpy as np
from google.colab.patches import cv2_imshow
import matplotlib as plt

from scipy.spatial import distance as dist

imagem = cv2.imread("/content/px-woman-smilings.jpg")
cv2_imshow(imagem)

classificar_dlib_68 = "/content/shape_predictor_68_face_landmarks.dat"

classificar_dlib = dlib.shape_predictor(classificar_dlib_68)
detector_face = dlib.get_frontal_face_detector()

def anotar_rosto(imagem):
  retangulos = detector_face(imagem, 1)
  if len(retangulos) == 0:
    return None
  for k, d in enumerate(retangulos):
    shape = classificar_dlib(imagem, d)
    print('Identificados' + str(k))
    cv2.rectangle(imagem, (d.left(), d.top()), (d.right(), d.bottom()), (255, 255, 0), 2)

    return imagem

imagem_anotada = imagem.copy()
imagem_anotada = anotar_rosto(imagem_anotada)
cv2_imshow(imagem_anotada)

def pontos_marcos_faciais(imagem):
  retangulos = detector_face(imagem, 1)

  if len(retangulos) == 0:
    return None

  marcos = []

  for ret in retangulos:
    marcos.append(np.matrix([[p.x, p.y] for p in classificar_dlib(imagem, ret).parts()]))
  return marcos

marcos_faciais = pontos_marcos_faciais(imagem)

marcos_faciais

def desenhar_marcos_faciais(imagem, marcos):
  for marco in marcos:
    for idx, ponto in enumerate(marco):
      centro = (ponto[0, 0], ponto[0, 1])
      cv2.circle(imagem, centro, 3, (255, 255, 0), -1)
      cv2.putText(imagem, str(idx), centro, cv2.FONT_HERSHEY_SIMPLEX, 0.8, (255,255,255), 2)
  return imagem

imagem_anotada = imagem.copy()
imagem_anotada = desenhar_marcos_faciais(imagem_anotada, marcos_faciais)
cv2_imshow(imagem_anotada)

imagem_man = cv2.imread("/content/px-man-happy.jpg")
cv2_imshow(imagem_man)

imagem_anotada2 = imagem_man.copy()
marcos_faciais2 = pontos_marcos_faciais(imagem_anotada2)
imagem_anotada2 = desenhar_marcos_faciais(imagem_anotada2, marcos_faciais2)
cv2_imshow(imagem_anotada2)

face = list(range(17, 68))
face_completa = list(range(0, 68))
labio = list(range(48, 61))
sombrancelha_direita = list(range(17, 22))
sombrancelha_esquerda = list(range(22, 27))
olho_direito = list(range(36, 42))
olho_esquerdo = list(range(42, 48))
nariz = list(range(27, 35))
mandibula = list(range(0, 17))

def aspecto_razao_olhos(pontos_olhos):
  a = dist.euclidean(pontos_olhos[1], pontos_olhos[5])  # Calculate distance between points 1 and 5
  b = dist.euclidean(pontos_olhos[2], pontos_olhos[4])  # Calculate distance between points 2 and 4
  c = dist.euclidean(pontos_olhos[0], pontos_olhos[3])  # Calculate distance between points 0 and 3

  aspecto_razao = (a + b) / (2.0 * c)
  return aspecto_razao

def anotar_marcos_casca_convexa(imagem, marcos):
  retangulos = detector_face(imagem, 1)

  if len(retangulos) == 0:
    return None

  for idx, ret in enumerate(retangulos):
    marco = marcos[idx]
    pontos = cv2.convexHull(marco[olho_esquerdo])
    cv2.drawContours(imagem, [pontos], 0, (0, 255, 0), 2)
    pontos = cv2.convexHull(marco[olho_direito])
    cv2.drawContours(imagem, [pontos], 0, (0, 255, 0), 2)

    return imagem

imagem_anotada = imagem_man.copy()
imagem_anotada = anotar_marcos_casca_convexa(imagem_anotada, marcos_faciais2)
cv2_imshow(imagem_anotada)



